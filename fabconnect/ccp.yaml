# ***** certificateAuthorities section *****
# The test-network-nano-bash does not start the Fabric-CA node, but we must keep the 
# certificateAuthorities section because otherwise the fabconnect does not start
certificateAuthorities:
  orderers-ca:
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/state/ca/orderers/server/tls-cert.pem
    url: http://localhost:7054
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    httpOptions:
      verify: false
  ibm-ca:
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/state/ca/ibm/server/tls-cert.pem
    url: http://localhost:7055
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    httpOptions:
      verify: false

channels:

  mainchannel:

    peers:
      peer0-ibm:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
  
    policies:
      queryChannelConfig:
        minResponses: 1
        maxTargets: 1
        retryOpts:
          attempts: 5
          initialBackoff: 1000ms
          maxBackoff: 10s
          backoffFactor: 2.0

client:
  organization: ibm

  logging:
    level: info
  
  cryptoconfig:
    path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elsewhere.
    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256
  
  tlsCerts:
    systemCertPool: true

orderers:
  _default:
    grpcOptions:
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
  
  orderer0:
    grpcOptions:
      ssl-target-name-override: orderer0
      grpc-max-send-message-length: 15
    url: http://localhost:7050
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config/ordererOrganizations/orderer/msp/tlscacerts/orderers-ca-7054.pem

  
  orderer1:
    grpcOptions:
      ssl-target-name-override: orderer1
      grpc-max-send-message-length: 15
    url: http://localhost:7051
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config/ordererOrganizations/orderer/msp/tlscacerts/orderers-ca-7054.pem

  
  orderer2:
    grpcOptions:
      ssl-target-name-override: orderer2
      grpc-max-send-message-length: 15
    url: http://localhost:7052
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config/ordererOrganizations/orderer/msp/tlscacerts/orderers-ca-7054.pem

organizations:
  ibm:
    mspid: ibm
    cryptopath: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config/peerOrganizations/ibm/users/Admin@ibm/msp
    peers:
      - peer0-ibm
    certificateAuthorities:
      - ibm-ca

peers:
  _default:
    grpcOptions:
      keep-alive-time: 1s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    
  peer0-ibm:
    grpcOptions:
      ssl-target-name-override: peer0-ibm
      grpc.http2.keepalive_time: 15
    url: http://localhost:7060
    tlsCACerts:
      path: /home/nick/Projects/k8s-hyperledger-fabric-2.2/crypto-config/peerOrganizations/ibm/msp/tlscacerts/ibm-ca-7054.pem

version: 1.1.0
